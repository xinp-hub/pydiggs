# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI/CD

on: # events that trigger our pipeline: push on any branch and release creation
  push:
  release:
    types: [created]


jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Run image # install poetry
      uses: abatilo/actions-poetry@v2
      with:
          poetry-version: 1.4.1
    - name: Install dependencies # install all dependencies
      run: poetry install
    - name: Linting # Run pylint static analysis
      run: |
          poetry run black --check --diff --color pydiggs
          poetry run isort --check-only pydiggs
          poetry run pylint pydiggs
    - name: mypy  # Run mypy static analysis
      run: |
        poetry run mypy -p pydiggs
    - name: Pytest # Run pytest
      run: |
        poetry run coverage run -m --source=pydiggs pytest tests
        poetry run coverage report

  publish:
    # Our publish job will only run on release creation events,
    # and only if the test job has passed
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Build and publish # publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build
