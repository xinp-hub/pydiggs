{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyDIGGS","text":"<p>A Python package for Data Interchange for Geotechnical and Geoenvironmental Specialists (DIGGS).</p> <ul> <li>Licensed under the Apache License 2.0</li> <li>Documentation: https://xinp-hub.github.io/pydiggs</li> <li>GitHub: https://github.com/xinp-hub/pydiggs</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Validate DIGGS instance files against:<ul> <li>DIGGS XSD Schema (version 2.6 by default)</li> <li>Standard XML Dictionary for \"DIGGS Measurement Properties\" definitions (v0.1/properties.xml) by default, accessed from here at the time of package release</li> <li>Schematron rules for business logic validation</li> </ul> </li> <li>Flexible validation output:<ul> <li>Write validation errors to log files</li> <li>Print validation errors directly to console</li> </ul> </li> <li>Command-line interface (CLI) for easy integration</li> </ul>"},{"location":"#web-application","title":"Web Application","text":"<p>Not a Python user? Looking for leveraging the power of pyDIGGS in an modern web application? Check out:</p> <ul> <li>DXplorer</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install pydiggs: <pre><code>pip install pydiggs\n</code></pre></p> <p>Basic usage with Python: <pre><code>from pydiggs import validator\n\n# Create a validator instance\nvalidation = validator(\"path/to/your/diggs_file.xml\")\n\n# Schema validation (using default DIGGS Schema v2.6)\nvalidation.schema_check()\n\n# Dictionary validation (using default DIGGS Dictionary)\nvalidation.dictionary_check()\n\n# Schematron validation (requires schematron file)\nvalidation = validator(\"path/to/your/diggs_file.xml\", schematron_path=\"path/to/schematron.sch\")\nvalidation.schematron_check()\n</code></pre></p> <p>Basic usage with CLI: <pre><code># Schema validation\npydiggs schema_check \"path/to/your/diggs_file.xml\"\n\n# Dictionary validation\npydiggs dictionary_check \"path/to/your/diggs_file.xml\"\n\n# Schematron validation\npydiggs schematron_check \"path/to/your/diggs_file.xml\" --schematron_path \"path/to/schematron.sch\"\n</code></pre></p> <p>For more detailed information and advanced usage, please see the documentation. </p>"},{"location":"authors/","title":"Authors","text":""},{"location":"authors/#development-team","title":"Development Team","text":""},{"location":"authors/#project-lead","title":"Project Lead","text":"<ul> <li>Xin Peng (xin_peng@outlook.com) - Project creator and lead maintainer</li> <li>Asitha Senanayake (asitha.senanayake@utexas.edu)</li> </ul>"},{"location":"authors/#contributors","title":"Contributors","text":"<p>We welcome contributions! Here's how you can help:</p> <ul> <li>Report bugs and request features on our GitHub Issues</li> <li>Submit pull requests for bug fixes or new features</li> <li>Improve documentation</li> <li>Share your use cases and success stories</li> </ul> <p>For more information on contributing, please see our Contributing Guide.</p>"},{"location":"authors/#acknowledgments","title":"Acknowledgments","text":"<p>Special thanks to: * The DIGGS community for their support and feedback * All users who have reported issues and suggested improvements </p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/xinp-hub/pydiggs/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>pydiggs could always use more documentation, whether as part of the official pydiggs docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/xinp-hub/pydiggs/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<p>Ready to contribute? Here's how to set up <code>pydiggs</code> for local development.</p> <ol> <li> <p>Fork the <code>pydiggs</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally: <pre><code>git clone git@github.com:your_name_here/pydiggs.git\ncd pydiggs\n</code></pre></p> </li> <li> <p>Install Poetry if you haven't already: <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre></p> </li> <li> <p>Install dependencies and set up your development environment: <pre><code>poetry install\n</code></pre></p> </li> </ol> <p>This will create a virtual environment and install all dependencies, including development dependencies.</p> <ol> <li> <p>Create a branch for local development: <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre></p> </li> <li> <p>Make your changes locally. The project uses several development tools:</p> </li> <li> <p>pytest for testing</p> </li> <li>pylint for code quality</li> <li>mypy for type checking</li> <li>pre-commit for automated checks</li> </ol> <p>Install pre-commit hooks:    <pre><code>poetry run pre-commit install\n</code></pre></p> <ol> <li>When you're done making changes:</li> <li>Run tests with pytest:      <pre><code>poetry run pytest\n</code></pre></li> <li>Check code quality:      <pre><code>poetry run pylint pydiggs tests\n</code></pre></li> <li> <p>Run type checking:      <pre><code>poetry run mypy pydiggs\n</code></pre></p> </li> <li> <p>Commit your changes and push your branch to GitHub: <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre></p> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality:</li> <li>Add docstrings to new functions/classes</li> <li>Update the documentation under <code>docs/</code></li> <li>Add the feature to the list in README.md</li> <li>The pull request should work for Python 3.10 and above.</li> <li>Check that all tests pass in the GitHub Actions CI pipeline.</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>To build and view the documentation locally: <pre><code>poetry run mkdocs serve\n</code></pre></p> <p>Then visit <code>http://127.0.0.1:8000</code> in your web browser.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>To run a subset of tests: <pre><code>poetry run pytest tests/test_pydiggs.py\n</code></pre></p> <p>To run tests with coverage: <pre><code>poetry run pytest --cov=pydiggs\n</code></pre></p>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<p>The project uses type hints and mypy for type checking: <pre><code>poetry run mypy pydiggs\n</code></pre></p>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>The project follows PEP 8 style guidelines. Code quality is enforced using: * pylint * pre-commit hooks * GitHub Actions CI</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy: 1. Update HISTORY.md with the new version changes 2. Update version in pyproject.toml:    <pre><code>poetry version patch  # possible: major / minor / patch\n</code></pre> 3. Commit the changes:    <pre><code>git add pyproject.toml HISTORY.md\ngit commit -m \"Bump version to x.x.x\"\ngit push\n</code></pre> 4. Create a new release on GitHub with the version number 5. GitHub Actions will automatically deploy to PyPI if tests pass. </p>"},{"location":"history/","title":"History","text":""},{"location":"history/#010-2021-06-14","title":"0.1.0 (2021-06-14)","text":"<ul> <li>First release on PyPI.</li> <li>Added DIGGS Schema validation features.</li> </ul>"},{"location":"history/#012-2021-06-30","title":"0.1.2 (2021-06-30)","text":"<ul> <li>Created a \"validator\" Class is  to incorporate all the validation-related methods.</li> <li>Added an argument to allow users specifying a specific version of the DIGGS XSD Schema for validation.</li> <li>Added a Schematron validation method.</li> <li>Updated Documentation.</li> </ul>"},{"location":"history/#013-2023-03-19","title":"0.1.3 (2023-03-19)","text":"<ul> <li>Officially added the dictionary validation method.</li> <li>Switched CI/CD workflows from Travis CI to GitHub Actions.</li> <li>Updated the package publishing method to adopt Poetry.</li> <li>Updated Documentation.</li> </ul>"},{"location":"history/#014-2025-01-17","title":"0.1.4 (2025-01-17)","text":"<ul> <li>Updated the default schema version to 2.6.</li> <li>Added new test files for schema V2.6 schema validation.</li> <li>Updated the default dictionary validation xml file to be consistent with the \"DIGGS Measurement Properties\" dictionary in \"DIGGS Code Lists and Measurement Properties Dictionaries V0.1\". (Note: if you want to validate against other dictionaries in \"DIGGS Code Lists and Measurement Properties Dictionaries V0.1\", you can download the dictionary file from the DIGGS website and specify the dictionary path in the validator class.)</li> <li>Updated the pytest file for testing the updates above.</li> <li>Updated the minimum python version to 3.10 to support the latest versions of dependencies.</li> <li>Updated the dependencies with the latest versions.</li> <li>Updated Documentation.</li> </ul>"},{"location":"history/#015-2025-02-02","title":"0.1.5 (2025-02-02)","text":"<ul> <li>Added a new argument to allow users to specify whether to output the log files.</li> <li>Changed license from GNU General Public License v3 to Apache License 2.0.</li> <li>Updated the documentation.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>pydiggs requires Python 3.8 or later and depends on the following packages: * lxml - for XML processing and validation * rich - for colored console output</p>"},{"location":"installation/#stable-release","title":"Stable Release","text":"<p>To install pydiggs, run this command in your terminal:</p> <pre><code>pip install pydiggs\n</code></pre> <p>This is the preferred method to install pydiggs, as it will always install the most recent stable release with all required dependencies.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#development-version","title":"Development Version","text":"<p>The latest development version can be installed directly from GitHub:</p> <pre><code>pip install git+https://github.com/xinp-hub/pydiggs.git\n</code></pre>"},{"location":"installation/#from-sources","title":"From Sources","text":"<p>The sources for pydiggs can be downloaded from the GitHub repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/xinp-hub/pydiggs\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/xinp-hub/pydiggs/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code># If you have Poetry installed (recommended for development)\npoetry install\n\n# Or using pip\npip install .\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>After installation, you can verify that pydiggs is installed correctly by running:</p> <pre><code>python -c \"import pydiggs; print(pydiggs.__version__)\"\n</code></pre> <p>This should print the version number of your installed pydiggs package. </p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#diggs-validator","title":"DIGGS <code>validator</code>","text":"<p>The DIGGS validator provides three types of validation: 1. Schema validation against XSD files 2. Dictionary validation against standard property definitions 3. Schematron validation against business rules</p> <p>For all validation types, you can control the error output: <pre><code># By default, validation errors will be written to log files\nvalidation = validator(\"DIGGS_Instance_File_Path\", output_log=True)\n\n# To print validation errors directly instead of writing to log files\nvalidation = validator(\"DIGGS_Instance_File_Path\", output_log=False)\n</code></pre></p>"},{"location":"usage/#1-schema-validation","title":"1. Schema Validation","text":""},{"location":"usage/#using-python","title":"Using Python","text":"<pre><code>from pydiggs import validator\n\n# Using default DIGGS Schema (version 2.6)\nvalidation = validator(\"DIGGS_Instance_File_Path\")\nvalidation.schema_check()\n\n# Using a specific DIGGS Schema version\nvalidation = validator(\"DIGGS_Instance_File_Path\", schema_path=\"DIGGS_Schema_File_Path\")\nvalidation.schema_check()\n\n# Access schema validation results\nprint(validation.syntax_error_log)      # Contains any XML syntax errors\nprint(validation.schema_validation_log) # Contains schema validation errors\nprint(validation.schema_error_log)      # Contains schema parse errors\n</code></pre>"},{"location":"usage/#using-command-line-interface","title":"Using Command Line Interface","text":"<pre><code># Using default schema\npydiggs schema_check \"DIGGS_Instance_File_Path\"\n\n# Using specific schema\npydiggs schema_check \"DIGGS_Instance_File_Path\" --schema_path \"DIGGS_Schema_File_Path\"\n</code></pre>"},{"location":"usage/#2-dictionary-validation","title":"2. Dictionary Validation","text":""},{"location":"usage/#using-python_1","title":"Using Python","text":"<pre><code>from pydiggs import validator\n\n# Using default DIGGS Dictionary\nvalidation = validator(\"DIGGS_Instance_File_Path\")\nvalidation.dictionary_check()\n\n# Using a specific dictionary file\nvalidation = validator(\"DIGGS_Instance_File_Path\", dictionary_path=\"DIGGS_Dictionary_File_Path\")\nvalidation.dictionary_check()\n\n# Access dictionary validation results\nprint(validation.dictionary_validation_log) # Contains dictionary validation errors\n</code></pre>"},{"location":"usage/#using-command-line-interface_1","title":"Using Command Line Interface","text":"<pre><code># Using default dictionary\npydiggs dictionary_check \"DIGGS_Instance_File_Path\"\n\n# Using specific dictionary\npydiggs dictionary_check \"DIGGS_Instance_File_Path\" --dictionary_path \"DIGGS_Dictionary_File_Path\"\n</code></pre>"},{"location":"usage/#3-schematron-validation","title":"3. Schematron Validation","text":""},{"location":"usage/#using-python_2","title":"Using Python","text":"<pre><code>from pydiggs import validator\n\n# Schematron validation requires a schematron schema file\nvalidation = validator(\"DIGGS_Instance_File_Path\", schematron_path=\"DIGGS_Schematron_File_Path\")\nvalidation.schematron_check()\n\n# Access schematron validation results\nprint(validation.schematron_validation_log) # Contains schematron validation errors\nprint(validation.schematron_error_log)      # Contains schematron parse errors\n</code></pre>"},{"location":"usage/#using-command-line-interface_2","title":"Using Command Line Interface","text":"<pre><code>pydiggs schematron_check \"DIGGS_Instance_File_Path\" --schematron_path \"DIGGS_Schematron_File_Path\"\n</code></pre>"}]}