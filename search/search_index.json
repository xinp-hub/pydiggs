{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyDIGGS","text":"<p>A Python package for Data Interchange for Geotechnical and Geoenvironmental Specialists (DIGGS).</p> <ul> <li>Free software: GNU General Public License v3</li> <li>Documentation: https://xinp-hub.github.io/pydiggs</li> <li>GitHub: https://github.com/xinp-hub/pydiggs</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Validate DIGGS instance files against DIGGS XSD, Schematron schemas, and XML Dictionaries.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install pydiggs: <pre><code>pip install pydiggs\n</code></pre></p> <p>Basic usage: <pre><code>from pydiggs import validator\n\n# Create a validator instance\nv = validator.Validator()\n\n# Validate a DIGGS XML file\nv.validate_schema(\"path/to/your/diggs_file.xml\")\n</code></pre></p> <p>For more information, please see the documentation. </p>"},{"location":"authors/","title":"Authors","text":""},{"location":"authors/#development-lead","title":"Development Lead","text":"<ul> <li>Xin Peng xin_peng@outlook.com</li> <li>Asitha Senanayake asitha.senanayake@utexas.edu</li> </ul>"},{"location":"authors/#contributors","title":"Contributors","text":"<p>None yet. Why not be the first? </p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/xinp-hub/pydiggs/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>pydiggs could always use more documentation, whether as part of the official pydiggs docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/xinp-hub/pydiggs/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>pydiggs</code> for local development.</p> <ol> <li> <p>Fork the <code>pydiggs</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally: <pre><code>git clone git@github.com:your_name_here/pydiggs.git\n</code></pre></p> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: <pre><code>mkvirtualenv pydiggs\ncd pydiggs/\npython setup.py develop\n</code></pre></p> </li> <li> <p>Create a branch for local development: <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: <pre><code>flake8 pydiggs tests\npython setup.py test or pytest\ntox\n</code></pre> To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub: <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre></p> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md.</li> <li>The pull request should work for Python 3.10 and above. Check https://github.com/xinp-hub/pydiggs/pull_requests and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests: <pre><code>pytest tests.test_pydiggs\n</code></pre></p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: <pre><code>bump2version patch # possible: major / minor / patch\ngit push\ngit push --tags\n</code></pre></p> <p>GitHub Actions will then deploy to PyPI if tests pass. </p>"},{"location":"history/","title":"History","text":""},{"location":"history/#010-2021-06-14","title":"0.1.0 (2021-06-14)","text":"<ul> <li>First release on PyPI.</li> <li>Added DIGGS Schema validation features.</li> </ul>"},{"location":"history/#012-2021-06-30","title":"0.1.2 (2021-06-30)","text":"<ul> <li>Created a \"validator\" Class is  to incorporate all the validation-related methods.</li> <li>Added an argument to allow users specifying a specific version of the DIGGS XSD Schema for validation.</li> <li>Added a Schematron validation method.</li> <li>Updated Documentation.</li> </ul>"},{"location":"history/#013-2023-03-19","title":"0.1.3 (2023-03-19)","text":"<ul> <li>Officially added the dictionary validation method.</li> <li>Switched CI/CD workflows from Travis CI to GitHub Actions.</li> <li>Updated the package publishing method to adopt Poetry.</li> <li>Updated Documentation.</li> </ul>"},{"location":"history/#014-2025-01-17","title":"0.1.4 (2025-01-17)","text":"<ul> <li>Updated the default schema version to 2.6.</li> <li>Added new test files for schema V2.6 schema validation.</li> <li>Updated the default dictionary validation xml file to be consistent with the \"DIGGS Measurement Properties\" dictionary in \"DIGGS Code Lists and Measurement Properties Dictionaries V0.1\". (Note: if you want to validate against other dictionaries in \"DIGGS Code Lists and Measurement Properties Dictionaries V0.1\", you can download the dictionary file from the DIGGS website and specify the dictionary path in the validator class.)</li> <li>Updated the pytest file for testing the updates above.</li> <li>Updated the minimum python version to 3.10 to support the latest versions of dependencies.</li> <li>Updated the dependencies with the latest versions.</li> <li>Updated Documentation.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable Release","text":"<p>To install pydiggs, run this command in your terminal:</p> <pre><code>pip install pydiggs\n</code></pre> <p>This is the preferred method to install pydiggs, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From Sources","text":"<p>The sources for pydiggs can be downloaded from the GitHub repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/xinp-hub/pydiggs\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/xinp-hub/pydiggs/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>poetry install\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#diggs-validator","title":"DIGGS <code>validator</code>","text":""},{"location":"usage/#1-using-jupyter-notebooks-or-py-files","title":"1. Using Jupyter Notebooks or py files","text":"<p>To use <code>validator</code> in a Python project:</p> <pre><code>from pydiggs import validator\n\n# Create a validator object for the target DIGGS instance file\nvalidation = validator(\"DIGGS_Instance_File_Path\")\n\n# Validate the DIGGS instance file against the default DIGGS XSD Schema\nvalidation.schema_check()\n\n# Validate the DIGGS instance file against a specific version of the DIGGS XSD Schema\nvalidation = validator(\"DIGGS_Instance_File_Path\", schema_path=\"DIGGS_Schema_File_Path\")\nvalidation.schema_check()\n\n# Print validation log\nprint(validation.schema_validation_log)\n\n# Validate against a Schematron Schema\nvalidation = validator(\"DIGGS_Instance_File_Path\", schematron_path=\"DIGGS_Schematron_File_Path\")\nvalidation.schematron_check()\n\n# Validate against the standard XML Dictionary file\nvalidation = validator(\"DIGGS_Instance_File_Path\")\nvalidation.dictionary_check()\n</code></pre>"},{"location":"usage/#2-using-command-line-interface-cli","title":"2. Using Command Line Interface (CLI)","text":"<p>Validate a DIGGS instance File against the default DIGGS XSD Schema using Command Line Interface (CLI): <pre><code>pydiggs schema_check \"DIGGS_Instance_File_Path\"\n</code></pre></p> <p>Validate a DIGGS instance File against a specific version of DIGGS XSD Schema using Command Line Interface: <pre><code>pydiggs schema_check \"DIGGS_Instance_File_Path\" --schema_path \"DIGGS_Schema_File_Path\"\n</code></pre></p> <p>Validate a DIGGS instance File against a Schematron Schema using Command Line Interface: <pre><code>pydiggs schematron_check \"DIGGS_Instance_File_Path\" --schematron_path \"DIGGS_Schematron_File_Path\"\n</code></pre></p> <p>Validate a DIGGS instance File against the standard Dictionary XML file using Command Line Interface: <pre><code>pydiggs dictionary_check \"DIGGS_Instance_File_Path\"\n</code></pre></p>"}]}